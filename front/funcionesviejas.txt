//AGREGAR PRODUCTOS A LA TABLA COMPRA
// const agregarProductoACompra = (producto) => {
//   setProductosCompra(prev => [...prev, { ...producto, cantidad: 1 }]);
// };


//REGISTRAR COMPRA Y LOTE VIEJO
//   const registrarCompraYLote = () => {
//   if (!metodopagoseleccionado) {
//     Swal.fire({
//       icon: 'warning',
//       title: 'Método de pago requerido',
//       text: 'Por favor, seleccione un método de pago antes de continuar con la compra.',
//       confirmButtonColor: '3085d6',
//       timer: 3500,
//       timerProgressBar: true
//     });
//     return
//   }
//   const cantidadProductos = productosCompra.length;
//   const descripciondecompra = `Se realizo la compra de: ${cantidadProductos} medicamentos.`
//   axios.post(`${URL}compra/post`, 
//   {
//     descripcion_compra: descripciondecompra,
//     Id_drogueria: Id_drogueria,
//     Id_metodoPago: metodopagoseleccionado,
//     Total: totalCompra
//   })
//   .then(() => {
//     axios.post(`${URL}detallecompra/post`, {

//     })
//      const detalleCompra = {
//         descripcion: descripciondecompra,
//         Id_drogueria: Id_drogueria,
//         Id_metodoPago: metodopagoseleccionado,
//         total: totalCompra,
//         productos: productosCompra, 
//         nombre_drogueria: nombreDrogueria
//      }
//       Swal.fire({
//       icon: 'success',
//       title: 'Éxito',
//       html: `Compra realizada con éxito a <b>${nombreDrogueria}</b>.`,
//       confirmButtonColor: '#3085d6',
//       timer: 4500,
//       timerProgressBar: true,
//       width: '600px'
//     }).then(() => {
//       setProductosCompra([])
//       limpiarCamposInputs()
//       handleCloseModalDetalleCompra()
//       setMetodoPagoSeleccionado('')
//       generarPDF(detalleCompra)
//     })   
//   })
//   .catch((err) => {
//     console.error('Error al realizar la compra', err);
//   })
// }


const FinalizarVenta = () => {
  if (!metodopagoseleccionado || !clienteSeleccionado) {
    Swal.fire({
      icon: 'warning',
      title: 'Faltan datos',
      text: 'Por favor seleccione un cliente y un método de pago.',
      confirmButtonColor: '#3085d6',
      timer: 3500,
      timerProgressBar: true
    });
    return;
  }

  if (carrito.length === 0) {
    Swal.fire({
      icon: 'warning',
      title: 'Carrito vacío',
      text: 'Debe agregar al menos un producto a la venta.',
      confirmButtonColor: '#3085d6',
      timer: 3500,
      timerProgressBar: true
    });
    return;
  }

  const totalVenta = carrito.reduce((acc, item) => acc + item.precio * item.cantidad, 0);

  // Armar el array de productos con lo que espera el backend
  const productosParaBackend = carrito.map(item => ({
    Id_producto: item.Id_producto,
    Id_lote: item.lote.Id_lote,
    cantidad: item.cantidad,
    precio_unitario: item.precio
  }));

  axios.post(`${URL}venta/registrarVenta`, {
    precioTotal_Venta: totalVenta,
    Id_cliente: clienteSeleccionado,
    Id_usuario: idUsuario,
    Id_metodoPago: metodopagoseleccionado,
    productos: productosParaBackend
  })
  .then((response) => {
    Swal.fire({
      icon: 'success',
      title: '¡Venta registrada!',
      html: `Venta registrada exitosamente.`,
      confirmButtonColor: '#3085d6',
      timer: 4000,
      timerProgressBar: true,
      width: '500px'
    }).then(() => {
      limpiarCampos();
    });
  })
  .catch((error) => {
    console.error('Error al registrar la venta', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Ocurrió un error al registrar la venta.',
    });
  });
};

//FUNCION PARA VALIDAR QUE SOLO SE MUESTREN LOTES NO VENCIDOS
  {productosFiltrados.slice(primerIndex, ultimoIndex).map((prod) => {
                      const lotesValidos = prod.lotes.filter(l => {
                        const diasRestantes = Math.ceil((new Date(l.fecha_vencimiento) - new Date()) / (1000 * 60 * 60 * 24));
                        return diasRestantes >= 0; // solo lotes no vencidos
                      });

                       // Tomamos el lote más cercano a vencer
                      const loteCercano = lotesValidos.reduce((prev, curr) =>
                        new Date(prev.fecha_vencimiento) < new Date(curr.fecha_vencimiento) ? prev : curr
                      );
                      const diasRestantes = Math.ceil((new Date(loteCercano.fecha_vencimiento) - new Date()) / (1000 * 60 * 60 * 24));
    const estaPorVencer = diasRestantes <= 5;


//SELECT DE CLIENTES DE VENTA VIEJO
 <Form.Select value={clienteSeleccionado} onChange={(e) => setClienteSeleccionado(e.target.value)}>
                {clientes.map((cl) => (
                  <option key={cl.Id_cliente} value={cl.Id_cliente}>
                    {cl.nombre_cliente}
                  </option>
                ))}
              </Form.Select>